- Common operations are indexing and assigning to an index position. Both of these operations take the same amount of time no matter how large the list becomes. When an operation like this is independent of the size of the list they are O(1).

- Another very common programming task is to grow a list. There are two ways to create a longer list. You can use the append method or the concatenation operator.
    - The append method is O(1).
    - However, the concatenation operator is O(k) where k is the size of the list that is being concatenated.

    - This is important for you to know because it can help you make your own programs more efficient by choosing the right tool for the job.

- Refer to 2.6.1 Listing 3.py

- When pop is called on the end of the list it takes O(1) but when pop is called on the first element in the list or anywhere in the middle it is O(n). The reason for this lies in how Python chooses to implement lists. When an item is taken from the front of the list, in Pythonâ€™s implementation, all the other elements in the list are shifted one position closer to the beginning.

- Big-O for various operations on List.

Operation	        Big-O Efficiency
index []	        O(1)
index assignment	O(1)
append	            O(1)
pop()	            O(1)
pop(i)	            O(n)
insert(i,item)  	O(n)
del operator	    O(n)
iteration	        O(n)
contains (in)	    O(n)
get slice [x:y] 	O(k)
del slice	        O(n)
set slice	        O(n+k)
reverse	            O(n)
concatenate	        O(k)
sort	            O(n log n)
multiply        	O(nk)